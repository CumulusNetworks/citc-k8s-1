#
# Copyright (C) 2018 Cumulus Networks, Inc. All rights reserved
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
# https://www.debian.org/legal/licenses/mit
# 
---
- set_fact:
    myvars: "{{ servervars[inventory_hostname] }}"

- name: ssh and sudo access
  stat:
    path: /home/cumulus/.ssh/authorized_keys
  become: yes
  register: _ssh_keys
- authorized_key:
    user: cumulus
    state: present
    key: "{{ lookup('file', '/home/cumulus/.ssh/authorized_keys') }}"
  become: yes
  when: not _ssh_keys.stat.exists
- copy:
    src: "{{ inventory_dir }}/files/no-passwd"
    dest: "/etc/sudoers.d/"
  become: yes

- name: distribute the cluster hosts file
  blockinfile:
    dest: /etc/hosts
    marker: "# {mark} ANSIBLE MANAGED BLOCK cluster hosts"
    block: "{{ lookup('file', '{{ inventory_dir }}/files/hosts') }}"
  become: yes

- name: install useful operational packages
  apt:
    name:
    - zile
    - lldpd
    - traceroute
    - ifupdown
    - tcpdump
    - ethtool
    - bridge-utils
    state: present
  become: yes

- name: configure and restart lldpd
  lineinfile:
    dest: /etc/lldpd.d/port_info.conf
    line: "configure lldp portidsubtype ifname"
    create: yes
  become: yes
- service:
    name: lldpd
    enabled: yes
    state: started
  become: yes

- name: Configure network interfaces (but leave down until FRR is installed)
  shell: ifdown --force --all --allow=ansible
  ignore_errors: yes
  become: yes
- template:
    src: interfaces.j2
    dest: /etc/network/interfaces
    mode: "u=rw,g=r,o=r"
  become: yes

- name: enable IP routing
  copy:
    src: 99cumulus_defaults
    dest: /etc/sysctl.d/99cumulus_defaults.conf
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"
  become: yes
  register: _sysctl_conf
- command: 'sysctl --system'
  become: yes
  when: _sysctl_conf is changed

- name: install and start FRR
  copy:
    src: files/frr_3.2+cl3u4_amd64.deb
    dest: "/tmp"
  become: yes
- apt:
    deb: /tmp/frr_3.2+cl3u4_amd64.deb
  become: yes
- template:
    src: frr.conf.j2
    dest: /etc/frr/frr.conf
    owner: frr
    group: frr
    mode: "u=rw,g=r,o=r"
  become: yes
- copy:
    src: "daemons"
    dest: "/etc/frr/daemons"
    owner: frr
    group: frr
    mode: "u=rw,g=r,o=r"
  become: yes
- service:
    name: frr
    enabled: yes
    state: restarted
  become: yes

- name: Kick the fabric facing interfaces
  shell: ifdown --force --all --allow=ansible && ifup --force --all --allow=ansible
  become: yes

- name: Add repositories/packages for NetQ, Docker, and k8s
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: A88BBC95
  become: yes
- apt_repository:
    repo: deb [arch=amd64] https://apps3.cumulusnetworks.com/repos/deb xenial netq-1.3
    filename: netq
    state: present
  become: yes
- apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present
  become: yes
- apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
    state: present
  become: yes
- apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: yes
- apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
  become: yes
- apt:
    update_cache: yes
  become: yes
- apt:
    name:
    - python-pip
    - docker-ce
    - kubeadm
    - kubelet
    - kubectl
    - cumulus-netq
    force: yes
  become: yes
- pip:
    name: docker-py
  become: yes

- name: Disable swap because kubernetes REALLY doesn't like it
  command: swapoff -a
  ignore_errors: yes
  become: yes
- replace:
    path: /etc/fstab
    regexp: '(^[^#\n]* swap .*$)'
    replace: '# \1'
  become: yes

- name: Start Docker & Kubernetes
  copy:
    src: files/docker-daemon.json
    dest: /etc/docker/daemon.json
  become: yes
  register: _docker_conf
- template:
    src: 10-kubeadm.conf.j2
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  become: yes
  register: _kubeadm_conf
- block:
  - command: systemctl daemon-reload
    become: yes
  - service:
      name: "{{ item }}"
      state: restarted
      enabled: yes
    become: yes
    with_items:
    - docker
    - kubelet
  when: _kubeadm_conf is changed or _docker_conf is changed

- name: Get ready for k8s and calico
  docker_network:
    name: docker0
    state: absent
  become: yes
  ignore_errors: yes
- command: ip link delete docker0
  become: yes
  ignore_errors: yes
- command: iptables -t nat -F
  become: yes
- command: iptables -F
  become: yes
- command: iptables -X
  become: yes
- lineinfile:
    path: /etc/modules
    regexp: 'br_netfilter'
    line: 'br_netfilter'
  become: yes
- command: modprobe br_netfilter
  become: yes

- name: Start NetQ and connect to the Telemetry Server
  service:
    name: rsyslog
    state: restarted
  become: yes
- copy:
    src: files/netq.yml
    dest: "/etc/netq/netq.yml"
    owner: root
    group: root
    mode: "u=rw,o=r,g=r"
  become: yes
- service:
    name: netqd
    enabled: yes
    state: restarted
  become: yes
- pause:
    seconds: 5
- command: netq config add experimental
  become: yes
- shell: netq config restart agent
  become: yes
...
